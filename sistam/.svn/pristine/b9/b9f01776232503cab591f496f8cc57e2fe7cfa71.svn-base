package br.com.petrobras.sistam.desktop.relatorio;

import br.com.petrobras.fcorp.swing.base.SDialog;
import br.com.petrobras.fcorp.swing.base.action.GenericAction;
import br.com.petrobras.fcorp.swing.components.SButton;
import br.com.petrobras.fcorp.swing.components.SComboBox;
import br.com.petrobras.fcorp.swing.components.SLabel;
import br.com.petrobras.fcorp.swing.components.SPanel;
import br.com.petrobras.fcorp.swing.components.STable;
import br.com.petrobras.sistam.desktop.util.RelatorioUtil;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.util.ResourceBundle;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.WindowConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.SwingBindings;

public class RelatorioMovimentacaoEmbarcacaoDialog extends SDialog {
    private RelatorioMovimentacaoEmbarcacaoModel model;
    
    public RelatorioMovimentacaoEmbarcacaoDialog(java.awt.Frame parent) {        
        super(parent, true);
        model = new RelatorioMovimentacaoEmbarcacaoModel();
        initComponents();
        setLocationRelativeTo(parent);
    }

    public RelatorioMovimentacaoEmbarcacaoModel getModel() {
        return model;
    }
    
    public void imprimirResmido(){
       RelatorioUtil.abrirRelatorioMovimentacaoEmbarcacaoResumido(model.obterVOParaRelatorio(), model.obterParametros());
    }
    
    public void imprimirCompleto(){
       RelatorioUtil.abrirRelatorioMovimentacaoEmbarcacaoCompleto(model.obterVOParaRelatorio(), model.obterParametros());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"}) @SuppressFBWarnings
    //CHECKSTYLE:OFF
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        GenericAction actionImprimirResumido = new GenericAction();
        GenericAction actionImprimirCompleto = new GenericAction();
        SPanel pnlCentral = new SPanel();
        SPanel pnlBotoes = new SPanel();
        SButton botalImprimir = new SButton();
        SButton botaoEnviarPorEmail = new SButton();
        SLabel sLabel4 = new SLabel();
        SComboBox comboAgencias = new SComboBox();
        SLabel sLabel3 = new SLabel();
        SComboBox comboPortos = new SComboBox();

        actionImprimirResumido.setComponentToRepaint(botalImprimir);
        actionImprimirResumido.setIcon(new ImageIcon(getClass().getResource("/icons/print.png"))); // NOI18N
        actionImprimirResumido.setMethodName("imprimirResmido");
        actionImprimirResumido.setNeededSecurityResources(new String[] {"PAINEL_SIMPLIFICADO"});
        actionImprimirResumido.setTarget(this);
        actionImprimirResumido.setText("Imprimir Resumido");
        actionImprimirResumido.setToolTipText("Imprime o relatório resumido de movimentações de embarcações");

        Binding binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${not empty model.agenciaSelecionada}"), actionImprimirResumido, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        actionImprimirCompleto.setComponentToRepaint(botalImprimir);
        actionImprimirCompleto.setIcon(new ImageIcon(getClass().getResource("/icons/print.png"))); // NOI18N
        actionImprimirCompleto.setMethodName("imprimirCompleto");
        actionImprimirCompleto.setNeededSecurityResources(new String[] {"PAINEL_COMPLETO"});
        actionImprimirCompleto.setTarget(this);
        actionImprimirCompleto.setText("Imprimir Completo");
        actionImprimirCompleto.setToolTipText("Imprime o relatório completo de movimentação de embarcações");

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${not empty model.agenciaSelecionada}"), actionImprimirCompleto, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relatório de Movimentação de Embarcações");
        setIconImage(null);

        pnlCentral.setName("pnlCentral"); // NOI18N

        pnlBotoes.setBorder(new SoftBevelBorder(BevelBorder.RAISED));
        pnlBotoes.setName("pnlBotoes"); // NOI18N
        pnlBotoes.setPreferredSize(new Dimension(14, 40));

        botalImprimir.setAction(actionImprimirResumido);
        botalImprimir.setName("botalImprimir"); // NOI18N
        pnlBotoes.add(botalImprimir);

        botaoEnviarPorEmail.setAction(actionImprimirCompleto);
        botaoEnviarPorEmail.setName("botaoEnviarPorEmail"); // NOI18N
        pnlBotoes.add(botaoEnviarPorEmail);

        ResourceBundle bundle = ResourceBundle.getBundle("sistam-labels"); // NOI18N
        sLabel4.setText(bundle.getString("lblAgencia")); // NOI18N
        sLabel4.setName("sLabel4"); // NOI18N

        comboAgencias.setName("comboAgencias"); // NOI18N

        ELProperty eLProperty = ELProperty.create("${model.agencias}");
        JComboBoxBinding jComboBoxBinding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, this, eLProperty, comboAgencias);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.agenciaSelecionada}"), comboAgencias, BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        sLabel3.setText(bundle.getString("lblPorto")); // NOI18N
        sLabel3.setName("sLabel3"); // NOI18N

        comboPortos.setName("comboPortos"); // NOI18N

        eLProperty = ELProperty.create("${model.portos}");
        jComboBoxBinding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, this, eLProperty, comboPortos);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.portoSelecionado}"), comboPortos, BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        GroupLayout pnlCentralLayout = new GroupLayout(pnlCentral);
        pnlCentral.setLayout(pnlCentralLayout);
        pnlCentralLayout.setHorizontalGroup(
            pnlCentralLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(pnlCentralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCentralLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(sLabel4, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(sLabel3, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(pnlCentralLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(comboAgencias, GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                    .addComponent(comboPortos, GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(Alignment.TRAILING, pnlCentralLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(pnlBotoes, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        pnlCentralLayout.setVerticalGroup(
            pnlCentralLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(pnlCentralLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pnlCentralLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(comboAgencias, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(sLabel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(pnlCentralLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(sLabel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboPortos, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(pnlBotoes, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(pnlCentral, BorderLayout.CENTER);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //CHECKSTYLE:ON

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
