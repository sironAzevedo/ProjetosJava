package br.com.petrobras.sistam.desktop.porto;

import br.com.petrobras.fcorp.swing.base.SDialog;
import br.com.petrobras.fcorp.swing.base.action.GenericAction;
import br.com.petrobras.fcorp.swing.components.SButton;
import br.com.petrobras.fcorp.swing.components.SLabel;
import br.com.petrobras.fcorp.swing.components.SPanel;
import br.com.petrobras.fcorp.swing.components.STable;
import br.com.petrobras.sistam.desktop.SistamApp;
import br.com.petrobras.sistam.desktop.components.lookups.porto.PortoLookup;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.SwingBindings;

public class DetalhesInformacoesPortoDialog extends SDialog {
    private DetalhesInformacoesPortoModel model;
    
    public DetalhesInformacoesPortoDialog(java.awt.Frame parent) {
        super(parent, true);
        this.model = new DetalhesInformacoesPortoModel();
        initComponents();
        setLocationRelativeTo(parent);
    }

    public DetalhesInformacoesPortoModel getModel() {
        return model;
    }
    
    public void adicionarComplemento(){
        DetalhesComplementoDialog dialog = new DetalhesComplementoDialog(SistamApp.getSistamApp().getMainFrame(), model.getPortoSelecionado());
        dialog.setVisible(true);
        
        if(dialog.getModel().isValido()){
            model.salvarComplemento(dialog.getModel().getPortoComplemento());
        }
    }
    
    public void excluirComplemento(){
        model.excluirComplementoSelecionado();
    }
    
    public void editarComplemento(){
        DetalhesComplementoDialog dialog = new DetalhesComplementoDialog(SistamApp.getSistamApp().getMainFrame(), model.getPortoSelecionado());
        dialog.getModel().setPortoComplemento(model.obterComplementoSelecionadoParaEdicao());
        dialog.setVisible(true);
        
        if(dialog.getModel().isValido()){
            model.salvarComplemento(dialog.getModel().getPortoComplemento());
        }
    }
    
    public void fechar(){
        dispose();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"}) @SuppressFBWarnings
    //CHECKSTYLE:OFF
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        actionSalvar = new GenericAction();
        GenericAction actionAdicionarComplemento = new GenericAction();
        GenericAction actionExcluirComplemento = new GenericAction();
        GenericAction actionEditarComplemento = new GenericAction();
        SPanel painelInformacoes = new SPanel();
        SLabel labelPorto = new SLabel();
        PortoLookup portoLookup1 = new PortoLookup();
        SPanel painelBotoes = new SPanel();
        SButton botaoAdicionar1 = new SButton();
        SPanel panelComplementos = new SPanel();
        JScrollPane jScrollPane1 = new JScrollPane();
        STable tbComplementos = new STable();
        SButton btEditar = new SButton();
        SButton btExcluir = new SButton();
        SButton btAdicionar = new SButton();

        actionSalvar.setMethodName("fechar");
        actionSalvar.setTarget(this);
        actionSalvar.setText("Fechar");
        actionSalvar.setToolTipText("Salva as informações complementares do porto");

        Binding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, ELProperty.create("${not empty model.complementos}"), actionSalvar, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        actionAdicionarComplemento.setIcon(new ImageIcon(getClass().getResource("/icons/add.png"))); // NOI18N
        actionAdicionarComplemento.setMethodName("adicionarComplemento");
        actionAdicionarComplemento.setTarget(this);
        actionAdicionarComplemento.setText("Adicionar");
        actionAdicionarComplemento.setToolTipText("Adicionar Complemento");

        binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.portoSelecionado != null}"), actionAdicionarComplemento, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        actionExcluirComplemento.setConfirm("Confirma a exclusão das informações complementares do porto?");
        actionExcluirComplemento.setIcon(new ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        actionExcluirComplemento.setMethodName("excluirComplemento");
        actionExcluirComplemento.setTarget(this);
        actionExcluirComplemento.setText("Excluir");
        actionExcluirComplemento.setToolTipText("Excluir Complemento");

        binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.complementoSelecionado != null}"), actionExcluirComplemento, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        actionEditarComplemento.setIcon(new ImageIcon(getClass().getResource("/icons/edit.png"))); // NOI18N
        actionEditarComplemento.setMethodName("editarComplemento");
        actionEditarComplemento.setTarget(this);
        actionEditarComplemento.setText("Editar");
        actionEditarComplemento.setToolTipText("Editar Complemento");

        binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.complementoSelecionado != null}"), actionEditarComplemento, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Informações Complementares do Porto");

        painelInformacoes.setBorder(BorderFactory.createTitledBorder("Porto"));
        painelInformacoes.setName("painelInformacoes"); // NOI18N

        labelPorto.setText("Porto:");
        labelPorto.setName("labelPorto"); // NOI18N

        portoLookup1.setText("portoLookup1");
        portoLookup1.setName("portoLookup1"); // NOI18N

        binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.portoSelecionado}"), portoLookup1, BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        GroupLayout painelInformacoesLayout = new GroupLayout(painelInformacoes);
        painelInformacoes.setLayout(painelInformacoesLayout);
        painelInformacoesLayout.setHorizontalGroup(
            painelInformacoesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(painelInformacoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelPorto, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portoLookup1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        painelInformacoesLayout.setVerticalGroup(
            painelInformacoesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(painelInformacoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelInformacoesLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPorto, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(portoLookup1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelBotoes.setBorder(new SoftBevelBorder(BevelBorder.RAISED));
        painelBotoes.setName("painelBotoes"); // NOI18N

        botaoAdicionar1.setAction(actionSalvar);
        botaoAdicionar1.setName("botaoAdicionar1"); // NOI18N
        painelBotoes.add(botaoAdicionar1);

        panelComplementos.setBorder(BorderFactory.createTitledBorder("Informações Complementares"));
        panelComplementos.setName("panelComplementos"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tbComplementos.setName("tbComplementos"); // NOI18N

        ELProperty eLProperty = ELProperty.create("${model.portoSelecionado.complementosAsList}");
        JTableBinding jTableBinding = SwingBindings.createJTableBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, tbComplementos);
        JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${nomeCtac}"));
        columnBinding.setColumnName("Nome CTAC");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${endereco}"));
        columnBinding.setColumnName("Endereço");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${cidade}"));
        columnBinding.setColumnName("Cidade");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${estado}"));
        columnBinding.setColumnName("Estado");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${cnpjComMascara}"));
        columnBinding.setColumnName("CNPJ");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${inscricaoEstadualFormatado}"));
        columnBinding.setColumnName("Inscrição Estadual");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.complementoSelecionado}"), tbComplementos, BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(tbComplementos);

        btEditar.setAction(actionEditarComplemento);
        btEditar.setName("btEditar"); // NOI18N

        btExcluir.setAction(actionExcluirComplemento);
        btExcluir.setName("btExcluir"); // NOI18N

        btAdicionar.setAction(actionAdicionarComplemento);
        btAdicionar.setName("btAdicionar"); // NOI18N

        GroupLayout panelComplementosLayout = new GroupLayout(panelComplementos);
        panelComplementos.setLayout(panelComplementosLayout);
        panelComplementosLayout.setHorizontalGroup(
            panelComplementosLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(panelComplementosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelComplementosLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.TRAILING, panelComplementosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btAdicionar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btEditar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(btExcluir, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelComplementosLayout.setVerticalGroup(
            panelComplementosLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(panelComplementosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelComplementosLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(btEditar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(btExcluir, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAdicionar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(painelInformacoes, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelComplementos, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelBotoes, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelInformacoes, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelComplementos, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelBotoes, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //CHECKSTYLE:ON

    // Variables declaration - do not modify//GEN-BEGIN:variables
    GenericAction actionSalvar;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
