package br.com.petrobras.sistam.desktop.agenciamento.formularios.anvisa;

import br.com.petrobras.fcorp.swing.base.SDialog;
import br.com.petrobras.fcorp.swing.base.action.GenericAction;
import br.com.petrobras.fcorp.swing.components.SButton;
import br.com.petrobras.fcorp.swing.components.SCheckBox;
import br.com.petrobras.fcorp.swing.components.SLabel;
import br.com.petrobras.fcorp.swing.components.SNumericTextField;
import br.com.petrobras.fcorp.swing.components.SPanel;
import br.com.petrobras.fcorp.swing.components.STextField;
import br.com.petrobras.fcorp.swing.components.dialog.DialogMessages;
import br.com.petrobras.fcorp.swing.components.util.GenericDocument;
import br.com.petrobras.sistam.desktop.SistamApp;
import br.com.petrobras.sistam.desktop.components.SistamDateChooser;
import br.com.petrobras.sistam.desktop.components.TimeZoneComboBox;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.WindowConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;

public class LiberacaoAnvisaDialog extends SDialog {
    LiberacaoAnvisaModel model = new LiberacaoAnvisaModel();
    
    public LiberacaoAnvisaDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
    }

    public LiberacaoAnvisaModel getModel() {
        return model;
    }
    
    public void solicitarCertificados() {
        model.validarSolicitacaoCertificados();
        model.salvar();
        model.carregarVO();
        SolicitacaoDeCertificadoDialog dialog = new SolicitacaoDeCertificadoDialog(SistamApp.getSistamApp().getMainFrame(), model.getAgenciamento(), model.getLiberacaoAnvisaVO());            
        dialog.setVisible(true);             
        
    }
    
    public void comunicacaoChegada() {
        model.validarComunicacaoChegada();
        model.salvar();

        if (!model.jaTemPendenciaRegistrada()
                && DialogMessages.confirm(this, "Existem pendências nas medidas sanitárias registradas no Certificado de Controle Sanitário?")){
            
            model.criarPendencia();
            SistamApp.getSistamApp().atualizarCaixaEntrada();
        }

        model.carregarVO();
        model.carregarVOComunicacaoChegada();
        ComunicacaoChegadaDialog dialog = new ComunicacaoChegadaDialog(SistamApp.getSistamApp().getMainFrame(), model.getAgenciamento(), model.getLiberacaoAnvisaVO());
        dialog.setVisible(true);
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"}) @SuppressFBWarnings
    //CHECKSTYLE:OFF
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        GenericAction actionSolicitarCertificado = new GenericAction();
        GenericAction actionComunicacaoChegada = new GenericAction();
        SPanel pnlLP = new SPanel();
        SPanel pnlValidadeCertificacao = new SPanel();
        SPanel pnlCSSB = new SPanel();
        SLabel sLabel7 = new SLabel();
        SLabel sLabel8 = new SLabel();
        SistamDateChooser dtCCSBEmissao = new SistamDateChooser();
        SLabel sLabel2 = new SLabel();
        SNumericTextField nrCSSB = new SNumericTextField();
        SistamDateChooser dtCCSBValidade = new SistamDateChooser();
        SLabel sLabel15 = new SLabel();
        STextField sTextField1 = new STextField();
        SPanel pnlCNSB = new SPanel();
        SLabel sLabel9 = new SLabel();
        SLabel sLabel10 = new SLabel();
        SistamDateChooser dtCNSBEmissao = new SistamDateChooser();
        SNumericTextField nrCNSBE = new SNumericTextField();
        SLabel sLabel13 = new SLabel();
        SLabel sLabel17 = new SLabel();
        SistamDateChooser dtCNSBValidade = new SistamDateChooser();
        STextField sTextField2 = new STextField();
        SPanel pnlCLP = new SPanel();
        SLabel sLabel11 = new SLabel();
        SLabel sLabel12 = new SLabel();
        SistamDateChooser dtCLPEmissao = new SistamDateChooser();
        SLabel sLabel3 = new SLabel();
        SNumericTextField nrCLP = new SNumericTextField();
        SLabel sLabel19 = new SLabel();
        SistamDateChooser dtCLPValidade = new SistamDateChooser();
        STextField sTextField3 = new STextField();
        SCheckBox sCheckBox1 = new SCheckBox();
        SCheckBox sCheckBox2 = new SCheckBox();
        SCheckBox sCheckBox3 = new SCheckBox();
        SLabel sLabel1 = new SLabel();
        timeZoneComboBox = new TimeZoneComboBox();
        pnlBotoes = new SPanel();
        SButton btnSalvar = new SButton();
        btnImprimir = new SButton();

        actionSolicitarCertificado.setIcon(new ImageIcon(getClass().getResource("/icons/props.png"))); // NOI18N
        actionSolicitarCertificado.setMethodName("solicitarCertificados");
        actionSolicitarCertificado.setTarget(this);
        ResourceBundle bundle = ResourceBundle.getBundle("sistam-labels"); // NOI18N
        actionSolicitarCertificado.setText(bundle.getString("lblLivrePratica")); // NOI18N
        actionSolicitarCertificado.setToolTipText("Certificados ANVISA");

        actionComunicacaoChegada.setIcon(new ImageIcon(getClass().getResource("/icons/props.png"))); // NOI18N
        actionComunicacaoChegada.setMethodName("comunicacaoChegada");
        actionComunicacaoChegada.setTarget(this);
        actionComunicacaoChegada.setText(bundle.getString("lblComunicacaoChegada")); // NOI18N

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(bundle.getString("formLiberacaoANVISA")); // NOI18N

        pnlLP.setBorder(BorderFactory.createTitledBorder(bundle.getString("liberacaoAnvisa"))); // NOI18N
        pnlLP.setName("pnlLP"); // NOI18N

        pnlValidadeCertificacao.setBorder(BorderFactory.createTitledBorder(bundle.getString("validadeCertificado"))); // NOI18N
        pnlValidadeCertificacao.setName("pnlValidadeCertificacao"); // NOI18N

        pnlCSSB.setName("pnlCSSB"); // NOI18N
        pnlCSSB.setOpaque(false);

        Binding binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoControleSanitario.id == null}"), pnlCSSB, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        sLabel7.setText(bundle.getString("lblEmissao")); // NOI18N
        sLabel7.setName("sLabel7"); // NOI18N

        sLabel8.setText(bundle.getString("lblPortoEmitssao")); // NOI18N
        sLabel8.setName("sLabel8"); // NOI18N

        dtCCSBEmissao.setName("dtCCSBEmissao"); // NOI18N
        dtCCSBEmissao.setTimeZoneComboBox(timeZoneComboBox);

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoControleSanitario.data}"), dtCCSBEmissao, BeanProperty.create("date"));
        bindingGroup.addBinding(binding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.possuiCCSBValido}"), dtCCSBEmissao, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        sLabel2.setText(bundle.getString("lblNrCertificado")); // NOI18N
        sLabel2.setName("sLabel2"); // NOI18N

        nrCSSB.setDecimalPlaces(new Short((short)0));
        nrCSSB.setIntegerPlaces(new Short((short)8));
        nrCSSB.setNumberClass(Long.class);
        nrCSSB.setText("sNumericTextField1");
        nrCSSB.setName("nrCSSB"); // NOI18N

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.possuiCCSBValido}"), nrCSSB, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoControleSanitario.numeroCertificado}"), nrCSSB, BeanProperty.create("longValue"));
        bindingGroup.addBinding(binding);

        dtCCSBValidade.setName("dtCCSBValidade"); // NOI18N
        dtCCSBValidade.setTimeZoneComboBox(timeZoneComboBox);

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoControleSanitario.dataValidade}"), dtCCSBValidade, BeanProperty.create("date"));
        bindingGroup.addBinding(binding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.possuiCCSBValido}"), dtCCSBValidade, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        sLabel15.setText(bundle.getString("lblValidade")); // NOI18N
        sLabel15.setName("sLabel15"); // NOI18N

        sTextField1.setDocument(new GenericDocument(50, 
            GenericDocument.OPTION_APPLY_UPPERCASE ));
    sTextField1.setName("txtNomePortoCCSB"); // NOI18N

    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoControleSanitario.nomePorto}"), sTextField1, BeanProperty.create("text"));
    bindingGroup.addBinding(binding);

        GroupLayout pnlCSSBLayout = new GroupLayout(pnlCSSB);
    pnlCSSB.setLayout(pnlCSSBLayout);
    pnlCSSBLayout.setHorizontalGroup(
        pnlCSSBLayout.createParallelGroup(Alignment.LEADING)
        .addGroup(pnlCSSBLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlCSSBLayout.createParallelGroup(Alignment.TRAILING)
                .addComponent(sLabel7, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(sLabel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(pnlCSSBLayout.createParallelGroup(Alignment.LEADING, false)
                .addComponent(dtCCSBEmissao, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nrCSSB, GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(pnlCSSBLayout.createParallelGroup(Alignment.LEADING)
                .addGroup(pnlCSSBLayout.createSequentialGroup()
                    .addComponent(sLabel15, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(ComponentPlacement.RELATED)
                    .addComponent(dtCCSBValidade, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(pnlCSSBLayout.createSequentialGroup()
                    .addComponent(sLabel8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(ComponentPlacement.RELATED)
                    .addComponent(sTextField1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addContainerGap())
    );
    pnlCSSBLayout.setVerticalGroup(
        pnlCSSBLayout.createParallelGroup(Alignment.LEADING)
        .addGroup(pnlCSSBLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlCSSBLayout.createParallelGroup(Alignment.BASELINE)
                .addComponent(sLabel15, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(sLabel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(nrCSSB, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(dtCCSBValidade, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(pnlCSSBLayout.createParallelGroup(Alignment.CENTER)
                .addComponent(sLabel7, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(dtCCSBEmissao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(sLabel8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(sTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pnlCNSB.setName("pnlCNSB"); // NOI18N
    pnlCNSB.setOpaque(false);

    sLabel9.setText(bundle.getString("lblEmissao")); // NOI18N
    sLabel9.setName("sLabel9"); // NOI18N

    sLabel10.setText(bundle.getString("lblPortoEmitssao")); // NOI18N
    sLabel10.setName("sLabel10"); // NOI18N

    dtCNSBEmissao.setName("dtCNSBEmissao"); // NOI18N
    dtCNSBEmissao.setTimeZoneComboBox(timeZoneComboBox);

    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoNacionalControleSanitario.data}"), dtCNSBEmissao, BeanProperty.create("date"));
    bindingGroup.addBinding(binding);
    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.possuiCNCSBValido}"), dtCNSBEmissao, BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    nrCNSBE.setDecimalPlaces(new Short((short)0));
    nrCNSBE.setIntegerPlaces(new Short((short)8));
    nrCNSBE.setNumberClass(Long.class);
    nrCNSBE.setText("sNumericTextField1");
    nrCNSBE.setName("nrCNSBE"); // NOI18N

    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.possuiCNCSBValido}"), nrCNSBE, BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);
    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoNacionalControleSanitario.numeroCertificado}"), nrCNSBE, BeanProperty.create("longValue"));
    bindingGroup.addBinding(binding);

    sLabel13.setText(bundle.getString("lblNrCertificado")); // NOI18N
    sLabel13.setName("sLabel13"); // NOI18N

    sLabel17.setText(bundle.getString("lblValidade")); // NOI18N
    sLabel17.setName("sLabel17"); // NOI18N

    dtCNSBValidade.setName("dtCNSBValidade"); // NOI18N
    dtCNSBValidade.setTimeZoneComboBox(timeZoneComboBox);

    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoNacionalControleSanitario.dataValidade}"), dtCNSBValidade, BeanProperty.create("date"));
    bindingGroup.addBinding(binding);
    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.possuiCNCSBValido}"), dtCNSBValidade, BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    sTextField2.setDocument(new GenericDocument(50, 
        GenericDocument.OPTION_APPLY_UPPERCASE ));
sTextField2.setName("txtNomePortoCNCSB"); // NOI18N

binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoNacionalControleSanitario.nomePorto}"), sTextField2, BeanProperty.create("text"));
bindingGroup.addBinding(binding);

        GroupLayout pnlCNSBLayout = new GroupLayout(pnlCNSB);
pnlCNSB.setLayout(pnlCNSBLayout);
pnlCNSBLayout.setHorizontalGroup(
    pnlCNSBLayout.createParallelGroup(Alignment.LEADING)
    .addGroup(pnlCNSBLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(pnlCNSBLayout.createParallelGroup(Alignment.LEADING)
            .addComponent(sLabel9, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addComponent(sLabel13, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(ComponentPlacement.RELATED)
        .addGroup(pnlCNSBLayout.createParallelGroup(Alignment.LEADING, false)
            .addComponent(dtCNSBEmissao, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(nrCNSBE, GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
        .addGap(10, 10, 10)
        .addGroup(pnlCNSBLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(pnlCNSBLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(sLabel10, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(sTextField2, GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
            .addGroup(pnlCNSBLayout.createSequentialGroup()
                .addComponent(sLabel17, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(dtCNSBValidade, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );
    pnlCNSBLayout.setVerticalGroup(
        pnlCNSBLayout.createParallelGroup(Alignment.LEADING)
        .addGroup(pnlCNSBLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlCNSBLayout.createParallelGroup(Alignment.BASELINE)
                .addComponent(sLabel13, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(nrCNSBE, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(sLabel17, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(dtCNSBValidade, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(ComponentPlacement.UNRELATED)
            .addGroup(pnlCNSBLayout.createParallelGroup(Alignment.CENTER)
                .addComponent(dtCNSBEmissao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(sLabel9, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(sLabel10, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(sTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pnlCLP.setName("pnlCLP"); // NOI18N
    pnlCLP.setOpaque(false);

    sLabel11.setText(bundle.getString("lblEmissao")); // NOI18N
    sLabel11.setName("sLabel11"); // NOI18N

    sLabel12.setText(bundle.getString("lblPortoEmitssao")); // NOI18N
    sLabel12.setName("sLabel12"); // NOI18N

    dtCLPEmissao.setName("dtCLPEmissao"); // NOI18N
    dtCLPEmissao.setTimeZoneComboBox(timeZoneComboBox);

    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoLivrePratica.data}"), dtCLPEmissao, BeanProperty.create("date"));
    bindingGroup.addBinding(binding);
    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.possuiLivrePraticaValido}"), dtCLPEmissao, BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    sLabel3.setText(bundle.getString("nrCertificado")); // NOI18N
    sLabel3.setName("sLabel3"); // NOI18N

    nrCLP.setDecimalPlaces(new Short((short)0));
    nrCLP.setIntegerPlaces(new Short((short)8));
    nrCLP.setNumberClass(Long.class);
    nrCLP.setName("nrCLP"); // NOI18N

    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.possuiLivrePraticaValido}"), nrCLP, BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);
    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoLivrePratica.numeroCertificado}"), nrCLP, BeanProperty.create("longValue"));
    bindingGroup.addBinding(binding);

    sLabel19.setText(bundle.getString("lblValidade")); // NOI18N
    sLabel19.setName("sLabel19"); // NOI18N

    dtCLPValidade.setName("dtCLPValidade"); // NOI18N
    dtCLPValidade.setTimeZoneComboBox(timeZoneComboBox);

    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoLivrePratica.dataValidade}"), dtCLPValidade, BeanProperty.create("date"));
    bindingGroup.addBinding(binding);
    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.possuiLivrePraticaValido}"), dtCLPValidade, BeanProperty.create("enabled"));
    bindingGroup.addBinding(binding);

    sTextField3.setDocument(new GenericDocument(50, 
        GenericDocument.OPTION_APPLY_UPPERCASE ));
sTextField3.setName("txtNomePortoCLP"); // NOI18N

binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.certificadoLivrePratica.nomePorto}"), sTextField3, BeanProperty.create("text"));
bindingGroup.addBinding(binding);

        GroupLayout pnlCLPLayout = new GroupLayout(pnlCLP);
pnlCLP.setLayout(pnlCLPLayout);
pnlCLPLayout.setHorizontalGroup(
    pnlCLPLayout.createParallelGroup(Alignment.LEADING)
    .addGroup(pnlCLPLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(pnlCLPLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, pnlCLPLayout.createSequentialGroup()
                .addGap(0, 22, Short.MAX_VALUE)
                .addComponent(sLabel11, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addComponent(sLabel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(ComponentPlacement.RELATED)
        .addGroup(pnlCLPLayout.createParallelGroup(Alignment.LEADING)
            .addComponent(dtCLPEmissao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addComponent(nrCLP, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE))
        .addGroup(pnlCLPLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, pnlCLPLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(sLabel12, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(sTextField3, GroupLayout.PREFERRED_SIZE, 217, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(pnlCLPLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(sLabel19, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(dtCLPValidade, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))))
    );
    pnlCLPLayout.setVerticalGroup(
        pnlCLPLayout.createParallelGroup(Alignment.LEADING)
        .addGroup(pnlCLPLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlCLPLayout.createParallelGroup(Alignment.LEADING)
                .addGroup(pnlCLPLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(sLabel19, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtCLPValidade, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlCLPLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(sLabel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(nrCLP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(ComponentPlacement.UNRELATED)
            .addGroup(pnlCLPLayout.createParallelGroup(Alignment.BASELINE)
                .addComponent(sLabel12, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(sLabel11, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(dtCLPEmissao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(sTextField3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    sCheckBox1.setText("Possui CCSB/CICSB válido?");
    sCheckBox1.setName("sCheckBox1"); // NOI18N
    sCheckBox1.setOpaque(false);

    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.possuiCCSBValido}"), sCheckBox1, BeanProperty.create("selected"));
    bindingGroup.addBinding(binding);

    sCheckBox2.setText("Possui CNCSB/CNICSB válido?");
    sCheckBox2.setName("sCheckBox2"); // NOI18N
    sCheckBox2.setOpaque(false);

    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.possuiCNCSBValido}"), sCheckBox2, BeanProperty.create("selected"));
    bindingGroup.addBinding(binding);

    sCheckBox2.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            sCheckBox2ActionPerformed(evt);
        }
    });
    sCheckBox2.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            sCheckBox2ActionPerformed(evt);
        }
    });

    sCheckBox3.setText("Possui CLP válido?");
    sCheckBox3.setName("sCheckBox3"); // NOI18N
    sCheckBox3.setOpaque(false);

    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.possuiLivrePraticaValido}"), sCheckBox3, BeanProperty.create("selected"));
    bindingGroup.addBinding(binding);

    sCheckBox3.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            sCheckBox3ActionPerformed(evt);
        }
    });
    sCheckBox3.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            sCheckBox3ActionPerformed(evt);
        }
    });

        GroupLayout pnlValidadeCertificacaoLayout = new GroupLayout(pnlValidadeCertificacao);
    pnlValidadeCertificacao.setLayout(pnlValidadeCertificacaoLayout);
    pnlValidadeCertificacaoLayout.setHorizontalGroup(
        pnlValidadeCertificacaoLayout.createParallelGroup(Alignment.LEADING)
        .addGroup(pnlValidadeCertificacaoLayout.createSequentialGroup()
            .addGroup(pnlValidadeCertificacaoLayout.createParallelGroup(Alignment.TRAILING)
                .addGroup(Alignment.LEADING, pnlValidadeCertificacaoLayout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addGroup(pnlValidadeCertificacaoLayout.createParallelGroup(Alignment.LEADING)
                        .addComponent(pnlCSSB, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlValidadeCertificacaoLayout.createSequentialGroup()
                            .addGroup(pnlValidadeCertificacaoLayout.createParallelGroup(Alignment.LEADING)
                                .addComponent(sCheckBox2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(sCheckBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE))))
                .addGroup(Alignment.LEADING, pnlValidadeCertificacaoLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlCNSB, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addContainerGap())
        .addGroup(pnlValidadeCertificacaoLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlValidadeCertificacaoLayout.createParallelGroup(Alignment.LEADING)
                .addGroup(pnlValidadeCertificacaoLayout.createSequentialGroup()
                    .addComponent(sCheckBox3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addComponent(pnlCLP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    pnlValidadeCertificacaoLayout.setVerticalGroup(
        pnlValidadeCertificacaoLayout.createParallelGroup(Alignment.LEADING)
        .addGroup(pnlValidadeCertificacaoLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(sCheckBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(pnlCSSB, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.UNRELATED)
            .addComponent(sCheckBox2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(pnlCNSB, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.UNRELATED)
            .addComponent(sCheckBox3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(pnlCLP, GroupLayout.PREFERRED_SIZE, 67, GroupLayout.PREFERRED_SIZE)
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    sLabel1.setText(bundle.getString("fusoHorario")); // NOI18N
    sLabel1.setName("sLabel1"); // NOI18N

    timeZoneComboBox.setEnabled(false);
    timeZoneComboBox.setName("timeZoneComboBox"); // NOI18N

    binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.zone}"), timeZoneComboBox, BeanProperty.create("selectedItem"));
    bindingGroup.addBinding(binding);

        GroupLayout pnlLPLayout = new GroupLayout(pnlLP);
    pnlLP.setLayout(pnlLPLayout);
    pnlLPLayout.setHorizontalGroup(
        pnlLPLayout.createParallelGroup(Alignment.LEADING)
        .addGroup(Alignment.TRAILING, pnlLPLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(pnlValidadeCertificacao, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
        .addGroup(Alignment.TRAILING, pnlLPLayout.createSequentialGroup()
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sLabel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(timeZoneComboBox, GroupLayout.PREFERRED_SIZE, 154, GroupLayout.PREFERRED_SIZE)
            .addGap(14, 14, 14))
    );
    pnlLPLayout.setVerticalGroup(
        pnlLPLayout.createParallelGroup(Alignment.LEADING)
        .addGroup(pnlLPLayout.createSequentialGroup()
            .addGroup(pnlLPLayout.createParallelGroup(Alignment.BASELINE)
                .addComponent(sLabel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(timeZoneComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(pnlValidadeCertificacao, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );

    getContentPane().add(pnlLP, BorderLayout.CENTER);

    pnlBotoes.setBorder(new SoftBevelBorder(BevelBorder.RAISED));
    pnlBotoes.setName("pnlBotoes"); // NOI18N

    btnSalvar.setAction(actionSolicitarCertificado);
    btnSalvar.setName("btnSalvar"); // NOI18N
    pnlBotoes.add(btnSalvar);

    btnImprimir.setAction(actionComunicacaoChegada);
    btnImprimir.setName("btnImprimir"); // NOI18N
    pnlBotoes.add(btnImprimir);

    getContentPane().add(pnlBotoes, BorderLayout.PAGE_END);

    bindingGroup.bind();

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbFinalidadeActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cbFinalidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbFinalidadeActionPerformed

    private void sCheckBox2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_sCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sCheckBox2ActionPerformed

    private void sCheckBox3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_sCheckBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sCheckBox3ActionPerformed
    //CHECKSTYLE:ON

    // Variables declaration - do not modify//GEN-BEGIN:variables
    SButton btnImprimir;
    SPanel pnlBotoes;
    TimeZoneComboBox timeZoneComboBox;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
