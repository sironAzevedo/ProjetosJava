package br.com.petrobras.sistam.desktop.agenciamento.operacoes;

import br.com.petrobras.fcorp.swing.base.SDialog;
import br.com.petrobras.fcorp.swing.base.action.GenericAction;
import br.com.petrobras.fcorp.swing.components.SButton;
import br.com.petrobras.fcorp.swing.components.SPanel;
import br.com.petrobras.fcorp.swing.components.STable;
import br.com.petrobras.sistam.common.entity.AgenciaSigo;
import br.com.petrobras.sistam.common.entity.Agenciamento;
import br.com.petrobras.sistam.common.entity.DocumentacaoCabotagem;
import br.com.petrobras.sistam.common.entity.DocumentacaoOperacao;
import br.com.petrobras.sistam.common.entity.Produto;
import br.com.petrobras.sistam.common.enums.SituacaoAFRM;
import br.com.petrobras.sistam.common.enums.SituacaoCarga;
import br.com.petrobras.sistam.desktop.SistamApp;
import br.com.petrobras.sistam.desktop.components.SistamNumberCellRenderer;
import br.com.petrobras.snarf.desktop.assync.AssyncInvoker;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.WindowConstants;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.JTableBinding.ColumnBinding;
import org.jdesktop.swingbinding.SwingBindings;
public class DocumentacaoDescargaCabotagemDialog extends SDialog {
    private DocumentacaoDescargaCabotagemModel model;
    
    public DocumentacaoDescargaCabotagemDialog(java.awt.Frame parent, Agenciamento agenciamento) {
        super(parent, true);
        this.model = new DocumentacaoDescargaCabotagemModel(agenciamento);
        initComponents();
        setLocationRelativeTo(parent);
        
        AssyncInvoker
                .create(model, "carregarListaDeDocumentacao")
                .schedule();
        
    }

    public DocumentacaoDescargaCabotagemModel getModel() {
        return model;
    }
    
    public void adicioanrDocumentacao(){
        DocumentacaoCabotagem nova = model.obterNovaDocumentacao();
        DetalheDocumentacaoDescargaCabotagemDialog dialog = new DetalheDocumentacaoDescargaCabotagemDialog(SistamApp.getApplication().getMainFrame(), nova);
        dialog.setVisible(true);
        
        if (dialog.getModel().isSalvo()){
            model.adicionarDocumentacao(dialog.getModel().getDocumentacao());
        }
    }
    
    public void editarDocumentacao(){
        DocumentacaoCabotagem documentacao = model.obterDocumetacaoParaEdicao();
        DetalheDocumentacaoDescargaCabotagemDialog dialog = new DetalheDocumentacaoDescargaCabotagemDialog(SistamApp.getApplication().getMainFrame(), documentacao);
        dialog.setVisible(true);
        
        if (dialog.getModel().isSalvo()){
            model.atualizarDocumentacao(dialog.getModel().getDocumentacao());
        }
    }
    
    public void adicinarProduto(){
        DocumentacaoOperacao novo = model.obterNovaDocumetacaoProduto();
        AssociacaoProdutoDescargaCabotagemDialog dialog = new AssociacaoProdutoDescargaCabotagemDialog(SistamApp.getApplication().getMainFrame(), novo);
        dialog.setVisible(true);
        
        if (dialog.getModel().isSalvo()){
            model.adicionarProduto(dialog.getModel().getDocumentacaoProduto());
        }
    }
    
    public void editarProduto(){
        DocumentacaoOperacao documentacaoProduto = model.obterDocumentacaoProdutoParaEdicao();
        AssociacaoProdutoDescargaCabotagemDialog dialog = new AssociacaoProdutoDescargaCabotagemDialog(SistamApp.getApplication().getMainFrame(), documentacaoProduto);
        dialog.setVisible(true);

        if (dialog.getModel().isSalvo()) {
            model.atualizarProduto(dialog.getModel().getDocumentacaoProduto());
        }
    }
    
    public void excluirProduto() {
        model.excluirProduto();
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"}) @SuppressFBWarnings
    //CHECKSTYLE:OFF
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        GenericAction actionAdicionarProduto = new GenericAction();
        GenericAction actionAdicionarDocumentacao = new GenericAction();
        GenericAction actionEditarDocumentacao = new GenericAction();
        GenericAction actionEditarProduto = new GenericAction();
        SistamNumberCellRenderer rendererQuantidade = new SistamNumberCellRenderer();
        SistamNumberCellRenderer rendererFrete = new SistamNumberCellRenderer();
        GenericAction actionExcluirProduto = new GenericAction();
        GenericAction actionExcluirDocumentacao = new GenericAction();
        painelDocumentacoes = new SPanel();
        JScrollPane jScrollPane1 = new JScrollPane();
        STable sTable1 = new STable();
        SButton botaoExcluirDocumentacao = new SButton();
        SButton botaoAdicionarDocumentacao = new SButton();
        SButton botaoEditarDocumentacao = new SButton();
        SButton botaoAdicionarDocumentacao1 = new SButton();
        SPanel painelProdutos = new SPanel();
        JScrollPane jScrollPane2 = new JScrollPane();
        STable sTable2 = new STable();
        SButton botaoEditarDocumentacao1 = new SButton();
        SButton botaoEditarDocumentacao2 = new SButton();

        actionAdicionarProduto.setIcon(new ImageIcon(getClass().getResource("/icons/add.png"))); // NOI18N
        actionAdicionarProduto.setMethodName("adicinarProduto");
        actionAdicionarProduto.setTarget(this);
        actionAdicionarProduto.setText("Adicionar Produto");
        actionAdicionarProduto.setToolTipText("Adiciona um produto a documentação selecionada");

        Binding binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${not empty model.documentacaoSelecionada}"), actionAdicionarProduto, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        actionAdicionarDocumentacao.setIcon(new ImageIcon(getClass().getResource("/icons/add.png"))); // NOI18N
        actionAdicionarDocumentacao.setMethodName("adicioanrDocumentacao");
        actionAdicionarDocumentacao.setTarget(this);
        actionAdicionarDocumentacao.setText("Adicionar Documentação");
        actionAdicionarDocumentacao.setToolTipText("Adiciona uma nova documentação");

        actionEditarDocumentacao.setIcon(new ImageIcon(getClass().getResource("/icons/edit.png"))); // NOI18N
        actionEditarDocumentacao.setMethodName("editarDocumentacao");
        actionEditarDocumentacao.setTarget(this);
        actionEditarDocumentacao.setText("Editar Documentação");
        actionEditarDocumentacao.setToolTipText("Edita a documentação selecionada");

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${not empty model.documentacaoSelecionada}"), actionEditarDocumentacao, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        actionEditarProduto.setIcon(new ImageIcon(getClass().getResource("/icons/edit.png"))); // NOI18N
        actionEditarProduto.setMethodName("editarProduto");
        actionEditarProduto.setTarget(this);
        actionEditarProduto.setText("Editar Produto");
        actionEditarProduto.setToolTipText("Edita informações do produto selecionado");

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${not empty model.documentacaoProdutoSelecionada}"), actionEditarProduto, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        rendererQuantidade.setDecimalsPlaces(new Short((short)4));

        actionExcluirProduto.setConfirm("Deseja realmente excluir o produto?");
        actionExcluirProduto.setIcon(new ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        actionExcluirProduto.setMethodName("excluirProduto");
        actionExcluirProduto.setTarget(this);
        actionExcluirProduto.setText("Excluir Produto");
        actionExcluirProduto.setToolTipText("Exclui o produto selecionado");

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${not empty model.documentacaoProdutoSelecionada}"), actionExcluirProduto, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        actionExcluirDocumentacao.setConfirm("Deseja realmente excluir a documentação selecionada e todos os produtos associados?");
        actionExcluirDocumentacao.setIcon(new ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        actionExcluirDocumentacao.setMethodName("excluirDocumentacao");
        actionExcluirDocumentacao.setTarget(model);
        actionExcluirDocumentacao.setText("Excluir Documentação");
        actionExcluirDocumentacao.setToolTipText("Exclui a documentação selecionada");

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${not empty model.documentacaoSelecionada}"), actionExcluirDocumentacao, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Documentação de Descarga Cabotagem");

        painelDocumentacoes.setBorder(BorderFactory.createTitledBorder("Lista de Documentações"));
        painelDocumentacoes.setName("painelDocumentacoes"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        sTable1.setName("sTable1"); // NOI18N

        ELProperty eLProperty = ELProperty.create("${model.listaDocumentacao}");
        JTableBinding jTableBinding = SwingBindings.createJTableBinding(UpdateStrategy.READ_WRITE, this, eLProperty, sTable1);
        ColumnBinding columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${agencia}"));
        columnBinding.setColumnName("Agência de Origem da Carga");
        columnBinding.setColumnClass(AgenciaSigo.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${manifestoEletronico}"));
        columnBinding.setColumnName("Manifesto Eletrônico");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.documentacaoSelecionada}"), sTable1, BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(sTable1);

        botaoExcluirDocumentacao.setAction(actionExcluirDocumentacao);
        botaoExcluirDocumentacao.setText("Excluir Documentação");
        botaoExcluirDocumentacao.setName("botaoExcluirDocumentacao"); // NOI18N

        botaoAdicionarDocumentacao.setAction(actionAdicionarDocumentacao);
        botaoAdicionarDocumentacao.setName("botaoAdicionarDocumentacao"); // NOI18N

        botaoEditarDocumentacao.setAction(actionEditarDocumentacao);
        botaoEditarDocumentacao.setName("botaoEditarDocumentacao"); // NOI18N

        botaoAdicionarDocumentacao1.setAction(actionAdicionarProduto);
        botaoAdicionarDocumentacao1.setName("botaoAdicionarDocumentacao1"); // NOI18N

        GroupLayout painelDocumentacoesLayout = new GroupLayout(painelDocumentacoes);
        painelDocumentacoes.setLayout(painelDocumentacoesLayout);
        painelDocumentacoesLayout.setHorizontalGroup(
            painelDocumentacoesLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(painelDocumentacoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDocumentacoesLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(painelDocumentacoesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(botaoAdicionarDocumentacao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(botaoEditarDocumentacao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(botaoExcluirDocumentacao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(botaoAdicionarDocumentacao1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE))
                .addContainerGap())
        );
        painelDocumentacoesLayout.setVerticalGroup(
            painelDocumentacoesLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(painelDocumentacoesLayout.createSequentialGroup()
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 111, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(painelDocumentacoesLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(botaoAdicionarDocumentacao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoEditarDocumentacao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoAdicionarDocumentacao1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoExcluirDocumentacao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        );

        painelProdutos.setBorder(BorderFactory.createTitledBorder("Lista de Produtos da Documentação Selecionada"));
        painelProdutos.setName("painelProdutos"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        sTable2.setName("sTable2"); // NOI18N

        eLProperty = ELProperty.create("${model.listaDocumentacaoProduto}");
        jTableBinding = SwingBindings.createJTableBinding(UpdateStrategy.READ_WRITE, this, eLProperty, sTable2);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${operacao.produto}"));
        columnBinding.setColumnName("Produto");
        columnBinding.setColumnClass(Produto.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${conhecimentoEletronico}"));
        columnBinding.setColumnName("CE");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${situacaoAfrm}"));
        columnBinding.setColumnName("AFRMM");
        columnBinding.setColumnClass(SituacaoAFRM.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${situacaoCarga}"));
        columnBinding.setColumnName("Situação da Carga");
        columnBinding.setColumnClass(SituacaoCarga.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.documentacaoProdutoSelecionada}"), sTable2, BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane2.setViewportView(sTable2);
        sTable2.getColumnModel().getColumn(3).setCellRenderer(rendererQuantidade);

        botaoEditarDocumentacao1.setAction(actionExcluirProduto);
        botaoEditarDocumentacao1.setName("botaoEditarDocumentacao1"); // NOI18N

        botaoEditarDocumentacao2.setAction(actionEditarProduto);
        botaoEditarDocumentacao2.setName("botaoEditarDocumentacao2"); // NOI18N

        GroupLayout painelProdutosLayout = new GroupLayout(painelProdutos);
        painelProdutos.setLayout(painelProdutosLayout);
        painelProdutosLayout.setHorizontalGroup(
            painelProdutosLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(painelProdutosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelProdutosLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                    .addGroup(Alignment.TRAILING, painelProdutosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(botaoEditarDocumentacao2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(botaoEditarDocumentacao1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        painelProdutosLayout.setVerticalGroup(
            painelProdutosLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(painelProdutosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(painelProdutosLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(botaoEditarDocumentacao1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoEditarDocumentacao2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(painelDocumentacoes, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelProdutos, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelDocumentacoes, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(painelProdutos, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //CHECKSTYLE:ON

    // Variables declaration - do not modify//GEN-BEGIN:variables
    SPanel painelDocumentacoes;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
