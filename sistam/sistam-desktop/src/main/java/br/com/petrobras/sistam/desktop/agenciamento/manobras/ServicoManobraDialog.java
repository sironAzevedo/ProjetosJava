package br.com.petrobras.sistam.desktop.agenciamento.manobras;

import br.com.petrobras.fcorp.swing.base.SDialog;
import br.com.petrobras.fcorp.swing.base.action.GenericAction;
import br.com.petrobras.fcorp.swing.components.SButton;
import br.com.petrobras.fcorp.swing.components.SCheckBox;
import br.com.petrobras.fcorp.swing.components.SComboBox;
import br.com.petrobras.fcorp.swing.components.SLabel;
import br.com.petrobras.fcorp.swing.components.SPanel;
import br.com.petrobras.fcorp.swing.components.STable;
import br.com.petrobras.fcorp.swing.components.STextArea;
import br.com.petrobras.fcorp.swing.components.util.GenericDocument;
import br.com.petrobras.sistam.common.entity.ServicoManobra;
import br.com.petrobras.sistam.desktop.components.SistamDateCellRenderer;
import br.com.petrobras.sistam.desktop.components.SistamDateChooser;
import br.com.petrobras.sistam.desktop.components.SistamTimeChooser;
import br.com.petrobras.sistam.desktop.components.TimeZoneComboBox;
import br.com.petrobras.sistam.desktop.util.DesktopUtil;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.Date;
import java.util.ResourceBundle;
import java.util.TimeZone;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.WindowConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.JTableBinding.ColumnBinding;
import org.jdesktop.swingbinding.SwingBindings;

public class ServicoManobraDialog extends SDialog{
    public static final String SERVICO_INSERIDO = "SERVICO_INSERIDO";
    public static final String SERVICO_ALTERADO = "SERVICO_ALTERADO";
    
    private ServicoManobraModel model;
    
    public ServicoManobraDialog(java.awt.Frame parent, ServicoManobra servicoManobra) {
        super(parent, true);
        this.model = new ServicoManobraModel(servicoManobra);
        initComponents();
        setLocationRelativeTo(parent);
        
        timeZoneComboBox.setSelectedItem(TimeZone.getTimeZone(servicoManobra.getManobra().getAgenciamento().getAgencia().getTimezone()));
        
    }

    public ServicoManobraModel getModel() {
        return model;
    }
    
    public void salvar(){
        //Propriedade que informe se está havendo edição ou criação de um serviço
        String property = model.isEdicao() ? SERVICO_ALTERADO : SERVICO_INSERIDO;
        
        if (model.getServicoManobra().getManobra().getId() != null) {
            model.salvar();
        } else {
            model.validar();
        }
        firePropertyChange(property,  null, null);
        
        //Se não for pra continuar inserindo, fecha a tela.
        if (! model.isContinuarInserindo()){
            dispose();
        } else{
            //caso continue inserindo, prepara um novo serviço
            model.prepararNovoServico();
        }
    }
    
    public void prepararParaVisualizacao() {
        DesktopUtil.habilitarComponentes(false, painelInformacoesGerais);
        DesktopUtil.habilitarComponentes(false, painelResponsaveis);
        painelBotoes.setVisible(false);
        btnExcluir.setVisible(false);
        btnAdicionar.setVisible(false);
        checkContinuarInserindo.setVisible(false);
    }
    
    public void prepararParaSolicitacao(){
        painelResponsaveis.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"}) @SuppressFBWarnings
    //CHECKSTYLE:OFF
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        GenericAction actionSalvar = new GenericAction();
        GenericAction actionAdicionar = new GenericAction();
        GenericAction actionExcluir = new GenericAction();
        SistamDateCellRenderer sistamDateCellRenderer1 = new SistamDateCellRenderer();
        painelInformacoesGerais = new SPanel();
        SLabel sLabel1 = new SLabel();
        labelEmpresa = new SLabel();
        cboEmpresa = new SComboBox();
        SLabel sLabel12 = new SLabel();
        SistamDateChooser dtProgramada1 = new SistamDateChooser();
        SistamTimeChooser horaProgramada = new SistamTimeChooser();
        SLabel labelObservacao = new SLabel();
        JScrollPane jScrollPane2 = new JScrollPane();
        STextArea sTextArea1 = new STextArea();
        SComboBox cboTpServico = new SComboBox();
        SLabel sLabel2 = new SLabel();
        timeZoneComboBox = new TimeZoneComboBox();
        painelResponsaveis = new SPanel();
        JScrollPane jScrollPane1 = new JScrollPane();
        STable sTable1 = new STable();
        btnExcluir = new SButton();
        btnAdicionar = new SButton();
        labelNome = new SLabel();
        cboNome = new SComboBox();
        SLabel lblInicioReal = new SLabel();
        SistamDateChooser dtInicioReal = new SistamDateChooser();
        SistamTimeChooser horaInicioReal = new SistamTimeChooser();
        SLabel sLabel3 = new SLabel();
        SistamDateChooser SistamDateChooser1 = new SistamDateChooser();
        SistamTimeChooser horaTerminoReal = new SistamTimeChooser();
        painelBotoes = new SPanel();
        SButton sButton4 = new SButton();
        checkContinuarInserindo = new SCheckBox();

        actionSalvar.setIcon(new ImageIcon(getClass().getResource("/icons/disk.png"))); // NOI18N
        actionSalvar.setMethodName("salvar");
        actionSalvar.setTarget(this);
        actionSalvar.setText("Salvar");
        actionSalvar.setToolTipText("Salva o serviço da manobra");

        actionAdicionar.setIcon(new ImageIcon(getClass().getResource("/icons/add.png"))); // NOI18N
        actionAdicionar.setMethodName("adicionarResponsavel");
        actionAdicionar.setTarget(model);
        actionAdicionar.setToolTipText("Adiciona um novo executor do serviço");

        actionExcluir.setConfirm("Deseja realmente excluir o responsável selecionado?");
        actionExcluir.setIcon(new ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        actionExcluir.setMethodName("excluirResponsavel");
        actionExcluir.setTarget(model);
        actionExcluir.setToolTipText("Exclui o executor selecionado");

        Binding binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${not empty model.responsavelSelecionado}"), actionExcluir, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        sistamDateCellRenderer1.setPattern("dd/MM/yyyy HH:mm");

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.timeZone}"), sistamDateCellRenderer1, BeanProperty.create("timeZone"));
        bindingGroup.addBinding(binding);

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Serviço da Manobra");

        painelInformacoesGerais.setBorder(BorderFactory.createTitledBorder("Empresa Prestadora do Serviço"));
        painelInformacoesGerais.setName("painelInformacoesGerais"); // NOI18N

        sLabel1.setText("Tipo:");
        sLabel1.setName("sLabel1"); // NOI18N

        labelEmpresa.setText("Empresa:");
        labelEmpresa.setName("labelEmpresa"); // NOI18N

        cboEmpresa.setName("cboEmpresa"); // NOI18N
        cboEmpresa.setPopupResizeEnabled(true);

        ELProperty eLProperty = ELProperty.create("${model.empresasMaritimas}");
        JComboBoxBinding jComboBoxBinding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, this, eLProperty, cboEmpresa);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.servicoManobra.empresaMaritima}"), cboEmpresa, BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${empty model.servicoManobra.id}"), cboEmpresa, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        sLabel12.setText("Data Programada:");
        sLabel12.setName("sLabel12"); // NOI18N

        dtProgramada1.setName("dtProgramada1"); // NOI18N
        dtProgramada1.setTimeChooser(horaProgramada);
        dtProgramada1.setTimeZoneComboBox(timeZoneComboBox);

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.servicoManobra.dataProgramada}"), dtProgramada1, BeanProperty.create("date"));
        bindingGroup.addBinding(binding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.habilitarDataProgramada}"), dtProgramada1, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        horaProgramada.setName("horaProgramada"); // NOI18N

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.habilitarDataProgramada}"), horaProgramada, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        labelObservacao.setText("Observação:");
        labelObservacao.setName("labelObservacao"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        sTextArea1.setColumns(20);
        sTextArea1.setDocument(new GenericDocument(256));
        sTextArea1.setLineWrap(true);
        sTextArea1.setRows(2);
        sTextArea1.setWrapStyleWord(true);
        sTextArea1.setName("sTextArea1"); // NOI18N

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.servicoManobra.observacao}"), sTextArea1, BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jScrollPane2.setViewportView(sTextArea1);

        cboTpServico.setName("cboTpServico"); // NOI18N

        eLProperty = ELProperty.create("${model.listaTipoServico}");
        jComboBoxBinding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, this, eLProperty, cboTpServico);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.servicoManobra.tipoDoServico}"), cboTpServico, BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${empty model.servicoManobra.id}"), cboTpServico, BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        ResourceBundle bundle = ResourceBundle.getBundle("sistam-labels"); // NOI18N
        sLabel2.setText(bundle.getString("fusoHorario")); // NOI18N
        sLabel2.setName("sLabel2"); // NOI18N

        timeZoneComboBox.setEnabled(false);
        timeZoneComboBox.setName("timeZoneComboBox"); // NOI18N

        GroupLayout painelInformacoesGeraisLayout = new GroupLayout(painelInformacoesGerais);
        painelInformacoesGerais.setLayout(painelInformacoesGeraisLayout);
        painelInformacoesGeraisLayout.setHorizontalGroup(
            painelInformacoesGeraisLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(painelInformacoesGeraisLayout.createSequentialGroup()
                .addGroup(painelInformacoesGeraisLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(painelInformacoesGeraisLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(painelInformacoesGeraisLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(painelInformacoesGeraisLayout.createParallelGroup(Alignment.LEADING)
                            .addComponent(sLabel1, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelEmpresa, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(painelInformacoesGeraisLayout.createParallelGroup(Alignment.LEADING)
                            .addGroup(painelInformacoesGeraisLayout.createSequentialGroup()
                                .addComponent(cboEmpresa, GroupLayout.PREFERRED_SIZE, 451, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(painelInformacoesGeraisLayout.createSequentialGroup()
                                .addComponent(cboTpServico, GroupLayout.PREFERRED_SIZE, 141, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(sLabel12, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(dtProgramada1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(horaProgramada, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(sLabel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(timeZoneComboBox, GroupLayout.PREFERRED_SIZE, 118, GroupLayout.PREFERRED_SIZE))))
                    .addGroup(painelInformacoesGeraisLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(labelObservacao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        painelInformacoesGeraisLayout.setVerticalGroup(
            painelInformacoesGeraisLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(painelInformacoesGeraisLayout.createSequentialGroup()
                .addGroup(painelInformacoesGeraisLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(sLabel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(sLabel12, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtProgramada1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaProgramada, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboTpServico, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(sLabel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeZoneComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(painelInformacoesGeraisLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(labelEmpresa, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboEmpresa, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(labelObservacao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                .addContainerGap())
        );

        painelResponsaveis.setBorder(BorderFactory.createTitledBorder("Responsável pelo Serviço"));
        painelResponsaveis.setName("painelResponsaveis"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        sTable1.setName("sTable1"); // NOI18N

        eLProperty = ELProperty.create("${model.servicoManobra.responsaveis}");
        JTableBinding jTableBinding = SwingBindings.createJTableBinding(UpdateStrategy.READ_WRITE, this, eLProperty, sTable1);
        ColumnBinding columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${servico.nomeServico}"));
        columnBinding.setColumnName("Nome");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${dataInicio}"));
        columnBinding.setColumnName("Data Início");
        columnBinding.setColumnClass(Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${dataTermino}"));
        columnBinding.setColumnName("Data Término");
        columnBinding.setColumnClass(Date.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.responsavelSelecionado}"), sTable1, BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(sTable1);
        sTable1.getColumnModel().getColumn(1).setCellRenderer(sistamDateCellRenderer1);
        sTable1.getColumnModel().getColumn(2).setCellRenderer(sistamDateCellRenderer1);

        btnExcluir.setAction(actionExcluir);
        btnExcluir.setName("btnExcluir"); // NOI18N

        btnAdicionar.setAction(actionAdicionar);
        btnAdicionar.setName("btnAdicionar"); // NOI18N

        labelNome.setText("Nome:");
        labelNome.setName("labelNome"); // NOI18N

        cboNome.setName("cboNome"); // NOI18N

        eLProperty = ELProperty.create("${model.listaServico}");
        jComboBoxBinding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, this, eLProperty, cboNome);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.responsavel.servico}"), cboNome, BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        lblInicioReal.setText("Dt. Início Real:");
        lblInicioReal.setName("lblInicioReal"); // NOI18N

        dtInicioReal.setName("dtInicioReal"); // NOI18N
        dtInicioReal.setTimeChooser(horaInicioReal);
        dtInicioReal.setTimeZoneComboBox(timeZoneComboBox);

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.responsavel.dataInicio}"), dtInicioReal, BeanProperty.create("date"));
        bindingGroup.addBinding(binding);

        horaInicioReal.setName("horaInicioReal"); // NOI18N

        sLabel3.setText("Dt. Término Real:");
        sLabel3.setName("sLabel3"); // NOI18N

        SistamDateChooser1.setName("SistamDateChooser1"); // NOI18N
        SistamDateChooser1.setTimeChooser(horaTerminoReal);
        SistamDateChooser1.setTimeZoneComboBox(timeZoneComboBox);

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.responsavel.dataTermino}"), SistamDateChooser1, BeanProperty.create("date"));
        bindingGroup.addBinding(binding);

        horaTerminoReal.setName("horaTerminoReal"); // NOI18N

        GroupLayout painelResponsaveisLayout = new GroupLayout(painelResponsaveis);
        painelResponsaveis.setLayout(painelResponsaveisLayout);
        painelResponsaveisLayout.setHorizontalGroup(
            painelResponsaveisLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(painelResponsaveisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelResponsaveisLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(painelResponsaveisLayout.createSequentialGroup()
                        .addGroup(painelResponsaveisLayout.createParallelGroup(Alignment.LEADING)
                            .addComponent(labelNome, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblInicioReal, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(painelResponsaveisLayout.createParallelGroup(Alignment.LEADING, false)
                            .addGroup(painelResponsaveisLayout.createSequentialGroup()
                                .addComponent(dtInicioReal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(horaInicioReal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(sLabel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(SistamDateChooser1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(horaTerminoReal, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE))
                            .addComponent(cboNome, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(painelResponsaveisLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(painelResponsaveisLayout.createParallelGroup(Alignment.LEADING)
                            .addComponent(btnAdicionar, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExcluir, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        painelResponsaveisLayout.setVerticalGroup(
            painelResponsaveisLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(painelResponsaveisLayout.createSequentialGroup()
                .addGroup(painelResponsaveisLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(labelNome, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboNome, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(painelResponsaveisLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(lblInicioReal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(dtInicioReal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaInicioReal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(sLabel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(SistamDateChooser1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(horaTerminoReal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(painelResponsaveisLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(painelResponsaveisLayout.createSequentialGroup()
                        .addComponent(btnAdicionar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(btnExcluir, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                .addContainerGap())
        );

        painelBotoes.setBorder(new SoftBevelBorder(BevelBorder.RAISED));
        painelBotoes.setName("painelBotoes"); // NOI18N

        sButton4.setAction(actionSalvar);
        sButton4.setName("sButton4"); // NOI18N
        painelBotoes.add(sButton4);

        checkContinuarInserindo.setText("Após salvar, continuar inserindo.");
        checkContinuarInserindo.setName("checkContinuarInserindo"); // NOI18N
        checkContinuarInserindo.setOpaque(false);

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.continuarInserindo}"), checkContinuarInserindo, BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(painelBotoes, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(painelResponsaveis, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(checkContinuarInserindo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(painelInformacoesGerais, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelInformacoesGerais, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(painelResponsaveis, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(checkContinuarInserindo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(painelBotoes, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //CHECKSTYLE:ON

    // Variables declaration - do not modify//GEN-BEGIN:variables
    SButton btnAdicionar;
    SButton btnExcluir;
    SComboBox cboEmpresa;
    SComboBox cboNome;
    SCheckBox checkContinuarInserindo;
    SLabel labelEmpresa;
    SLabel labelNome;
    SPanel painelBotoes;
    SPanel painelInformacoesGerais;
    SPanel painelResponsaveis;
    TimeZoneComboBox timeZoneComboBox;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
