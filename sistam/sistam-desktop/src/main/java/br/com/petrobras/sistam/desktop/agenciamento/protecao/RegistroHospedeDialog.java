package br.com.petrobras.sistam.desktop.agenciamento.protecao;

import br.com.petrobras.fcorp.swing.base.SDialog;
import br.com.petrobras.fcorp.swing.base.action.GenericAction;
import br.com.petrobras.fcorp.swing.components.SButton;
import br.com.petrobras.fcorp.swing.components.SCheckBox;
import br.com.petrobras.fcorp.swing.components.SFormattedTextField;
import br.com.petrobras.fcorp.swing.components.SLabel;
import br.com.petrobras.fcorp.swing.components.SPanel;
import br.com.petrobras.fcorp.swing.components.STextField;
import br.com.petrobras.fcorp.swing.components.dialog.DialogMessages;
import br.com.petrobras.fcorp.swing.components.util.GenericDocument;
import br.com.petrobras.sistam.common.entity.Hospede;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.WindowConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;

public class RegistroHospedeDialog extends SDialog {

    public static final String HOSPEDE_INSERIDO = "HOSPEDE_INSERIDO";
    public static final String HOSPEDE_ALTERADO = "HOSPEDE_ALTERADO";
    private RegistroHospedeModel model;

    public RegistroHospedeDialog(java.awt.Frame parent, Hospede hospede) {
        super(parent, true);

        model = new RegistroHospedeModel(hospede);

        initComponents();
        setLocationRelativeTo(parent);

        campoCPF.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                actionSalvar.setEnabled(false);
            }

            @Override
            public void focusLost(FocusEvent e) {
                actionSalvar.setEnabled(true);
            }
        });

        campoCPF.setTemplate(SFormattedTextField.Template.CPF);
        GenericAction actionErroCpf = new GenericAction();
        actionErroCpf.setMethodName("erroCpf");
        actionErroCpf.setTarget(this);
        campoCPF.getActionMap().put("postTip", actionErroCpf);
    }

    public void erroCpf() {
        DialogMessages.error(this, "CPF inválido.");
    }

    public RegistroHospedeModel getModel() {
        return model;
    }

    public void salvar() {
        String property = model.isEdicao() ? HOSPEDE_ALTERADO : HOSPEDE_INSERIDO;

        model.validar();
        firePropertyChange(property, null, null);

        //Se não for pra continuar inserindo, fecha a tela.
        if (!model.isContinuarInserindo()) {
            dispose();
        } else {
            //caso continue inserindo, prepara um novo serviço
            model.prepararNovoHospede();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "PMD"})
    @SuppressFBWarnings
    //CHECKSTYLE:OFF
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        actionSalvar = new GenericAction();
        SPanel painelDados = new SPanel();
        SLabel labelNome = new SLabel();
        SLabel labelTipo = new SLabel();
        SLabel sLabel3 = new SLabel();
        STextField campoNome = new STextField();
        STextField campoTipo = new STextField();
        campoCPF = new SFormattedTextField();
        painelBotoes = new SPanel();
        SButton sButton4 = new SButton();
        checkContinuarInserindo = new SCheckBox();

        actionSalvar.setIcon(new ImageIcon(getClass().getResource("/icons/disk.png"))); // NOI18N
        actionSalvar.setMethodName("salvar");
        actionSalvar.setTarget(this);
        actionSalvar.setText("Salvar");
        actionSalvar.setToolTipText("Salva o hóspede");

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registro de Hóspede");

        painelDados.setBorder(BorderFactory.createTitledBorder(""));
        painelDados.setName("painelDados"); // NOI18N

        labelNome.setText("Nome:");
        labelNome.setName("labelNome"); // NOI18N

        labelTipo.setText("RG/MAT/CIR/PASS:");
        labelTipo.setName("labelTipo"); // NOI18N

        sLabel3.setText("CPF:");
        sLabel3.setName("sLabel3"); // NOI18N

        campoNome.setDocument(new GenericDocument(50, 
            GenericDocument.OPTION_APPLY_UPPERCASE ));
    campoNome.setName("campoNome"); // NOI18N

        Binding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.hospede.nome}"), campoNome, BeanProperty.create("text"));
    bindingGroup.addBinding(binding);

    campoTipo.setDocument(new GenericDocument(50));
    campoTipo.setName("campoTipo"); // NOI18N

    binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.hospede.documento}"), campoTipo, BeanProperty.create("text"));
    bindingGroup.addBinding(binding);

    campoCPF.setName("campoCPF"); // NOI18N

    binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.hospede.cpfComMascara}"), campoCPF, BeanProperty.create("value"));
    bindingGroup.addBinding(binding);

        GroupLayout painelDadosLayout = new GroupLayout(painelDados);
    painelDados.setLayout(painelDadosLayout);
    painelDadosLayout.setHorizontalGroup(
        painelDadosLayout.createParallelGroup(Alignment.LEADING)
        .addGroup(painelDadosLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(painelDadosLayout.createParallelGroup(Alignment.LEADING)
                .addComponent(sLabel3, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(labelTipo, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(labelNome, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(painelDadosLayout.createParallelGroup(Alignment.LEADING)
                .addGroup(painelDadosLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(campoNome, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoTipo, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
                .addComponent(campoCPF, GroupLayout.PREFERRED_SIZE, 135, GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );
    painelDadosLayout.setVerticalGroup(
        painelDadosLayout.createParallelGroup(Alignment.LEADING)
        .addGroup(painelDadosLayout.createSequentialGroup()
            .addGap(14, 14, 14)
            .addGroup(painelDadosLayout.createParallelGroup(Alignment.CENTER)
                .addComponent(labelNome, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(campoNome, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(painelDadosLayout.createParallelGroup(Alignment.CENTER)
                .addComponent(labelTipo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(campoTipo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(painelDadosLayout.createParallelGroup(Alignment.CENTER)
                .addComponent(sLabel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(campoCPF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    painelBotoes.setBorder(new SoftBevelBorder(BevelBorder.RAISED));
    painelBotoes.setName("painelBotoes"); // NOI18N

    sButton4.setAction(actionSalvar);
    sButton4.setName("sButton4"); // NOI18N
    painelBotoes.add(sButton4);

    checkContinuarInserindo.setText("Após salvar, continuar inserindo.");
    checkContinuarInserindo.setName("checkContinuarInserindo"); // NOI18N
    checkContinuarInserindo.setOpaque(false);

    binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, ELProperty.create("${model.continuarInserindo}"), checkContinuarInserindo, BeanProperty.create("selected"));
    bindingGroup.addBinding(binding);

        GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(Alignment.LEADING)
        .addComponent(painelBotoes, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(Alignment.LEADING)
                .addComponent(painelDados, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(checkContinuarInserindo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
            .addGap(0, 0, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(painelDados, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(checkContinuarInserindo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(painelBotoes, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, 0))
    );

    bindingGroup.bind();

    pack();
    }// </editor-fold>//GEN-END:initComponents
    //CHECKSTYLE:ON
    // Variables declaration - do not modify//GEN-BEGIN:variables
    GenericAction actionSalvar;
    SFormattedTextField campoCPF;
    SCheckBox checkContinuarInserindo;
    SPanel painelBotoes;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
